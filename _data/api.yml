---
swagger: "2.0"

info:
  version: 1.0.0
  title: Modbus webserver Open API
  description: |
  
    ### Restful API for [psmb](https://github.com/taka-wang/psmb)

schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
host: localhost
basePath: /api

#
# ----- paths
#
paths:
#
# @One-off requests
#
  /mb/tcp/{fc}:
    get:
      summary: One-off requests - Read coil/register (mbtcp.once.read)
      description: |

        ##### Request examples
        
        - Bits read (FC1, FC2): 
          
          ```bash
          /mb/tcp/1?ip=192.168.3.2&port=503&slave=1&addr=10&len=4
          ```
          
          
        - Register read (FC3, FC4) - type 1, 2 (Register Array): 
          
          ```bash
          /mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=10&type=1
          ```
          
          
        - Register read (FC3, FC4) - type 3 (scale):
                  
          ```bash
          /mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=3&a=0&b=65535&c=100&d=500
          ```
        
        
        - Register read (FC3, FC4) - type 4, 5 (16-bit):
                  
          ```bash
          /mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=4&order=1
          ```
        
        
        - Register read (FC3, FC4) - type 6, 7, 8 (32-bit):
          
          ```bash
          /mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=6&order=3
          ```
      parameters:
        - $ref: "#/parameters/readFunctionCode"
        - $ref: "#/parameters/ip"
        - $ref: "#/parameters/port"
        - $ref: "#/parameters/slave"
        - $ref: "#/parameters/startAddr"
        - $ref: "#/parameters/length"
        - $ref: "#/parameters/dataType"
        - $ref: "#/parameters/endian"
        - $ref: "#/parameters/scaleDomainLow"
        - $ref: "#/parameters/scaleDomainHigh"
        - $ref: "#/parameters/scaleRangeLow"
        - $ref: "#/parameters/scaleRangeHigh"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          description: Request is ok
          schema:
            $ref: "#/definitions/mbtcpRead"
          examples:
            Bits read (FC1, FC2):
              {
                "status": "ok",
                "data": [0, 1, 0, 1, 0, 1]
              }
            Register read (FC3, FC4) - type 1 (Register Array):
              {
                "status": "ok",
                "type": 1,
                "bytes": [0XFF, 0X34, 0XAB],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 2 (Hex String):
              {
                "status": "ok",
                "type": 2,
                "bytes": [0XFF, 0X34, 0XAB],
                "data": "112C004F12345678"
              }
            Register read (FC3, FC4) - type 3 (scale):
              {
                "status": "ok",
                "type": 3,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [22.34, 33.12, 44.56]
              }
            Register read (FC3, FC4) - type 4, 5 (16-bit):
              {
                "status": "ok",
                "type": 4,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 6, 7 (UInt32, Int32):
              {
                "status": "ok",
                "type": 6,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 8 (Float32):
              {
                "status": "ok",
                "type": 8,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [22.34, 33.12, 44.56]
              }

    post:
      summary: One-off requests - Write coil/register (mbtcp.once.write)
      description: |

        ##### Request examples
        
        - bit write (FC5) - write single bit:
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "data": 1
            }
          ```
        
        - register write (FC6) - write single register (dec):
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "hex": false,
              "data": "22"
            }
          ```
        
        - register write (FC6) - write single register (hex)
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "hex": true,
              "data": "ABCD"
            }
          ```
        
        - bits write (FC15) - write multiple bits
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "data": [1,0,1,0]
            }
          ```

        - registers write (FC16) - write multiple registers (dec)
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "hex": false,
              "data": "11,22,33,44"
            }
          ```

        - registers write (FC16) - write multiple registers (hex)
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "hex": true,
              "data": "ABCD1234EFAB1234"
            }
          ```

      parameters:
        - $ref: "#/parameters/writeFunctionCode"
        - name: mbtcpWrite
          in: body
          required: true
          description: Data to be written.
          schema:
            $ref: "#/definitions/mbtcpWrite"
      responses:
        default:
          $ref: "#/responses/fail"
        200:
          $ref: "#/responses/ok"

  /mb/tcp/timeout:
    get:
      summary: One-off requests - Get TCP connection timeout (mbtcp.timeout.read)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/timeout
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          description: Request is ok
          schema:
            allOf:
              - $ref: "#/definitions/timeout"
            required:
              - status
            properties:
              status:
                type: string
                description: Response string
          examples:
            'application/json': 
              {
                "status": "ok", 
                "timeout": 210000
              }

    post:
      summary: One-off requests - Set TCP connection timeout (mbtcp.timeout.update)
      description: |

        ##### Request examples
        
        ```JSON
        { "timeout": 210000 }
        ```
      parameters:
        - name: timeout
          required: true
          in: body
          description: Timeout in usec, range [210000,~)
          schema:
            $ref: "#/definitions/timeout"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"
#
# @Polling requests
#
  /mb/tcp/poll/{name}:
    get:
      summary: Polling requests - Read poll request status (mbtcp.poll.read)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/poll/{name}
        ```
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          description: Request is ok
          schema:
            allOf:
              - $ref: "#/definitions/mbtcpPollStatus"
            required:
              - status
            properties:
              status:
                type: string
                description: Response string
          examples:
            'application/json':
              {
                "fc": 1,
                "ip": "192.168.3.2",
                "port": "502",
                "slave": 22,
                "addr": 250,
                "len": 10,
                "interval" : 3,
                "status": "ok",
                "enabled": true,
                "type": 1,
                "order": 2,
                "range": {}
              }
    
    post:
      summary: Polling requests - Add poll request (mbtcp.poll.create)
      description: |

        ##### Request examples
        
        - Bits read (FC1, FC2):
          
          ```JSON
            {
              "interval": 3,
              "enabled": true,
              "fc" : 1,
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4
            }
          ```
        
        - Register read (FC3, FC4) - type 1, 2 (raw):
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 1
          }
          ```
        
        - Register read (FC3, FC4) - type 3 (scale)
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 3,
            "range": 
            {
                "a": 0,
                "b": 65535,
                "c": 100,
                "d": 500
            }
          }
          ```

        - Register read (FC3, FC4) - type 4, 5 (16-bit)
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 4,
            "order": 1
          }
          ```

        - Register read (FC3, FC4) - type 6, 7, 8 (32-bit)
          
          ```JSON
          {
            "name": "led_1",
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 6,
            "order": 3
          }
          ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: mbtcpPollStatus
          in: body
          required: true
          description: Data to be polled.
          schema:
            $ref: "#/definitions/mbtcpPollStatus"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

    put:
      summary: Polling requests - Update poll request interval (mbtcp.poll.update)
      description: |

        ##### Request examples
        
        ```JavaScript
        {
            "interval" : 3
        }
        ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: interval
          required: true
          in: body
          description: Polling interval in sec
          schema:
            $ref: "#/definitions/pollInterval"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"
          
    delete:      
      summary: Polling requests - Delete poll request (mbtcp.poll.delete)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/poll/{name}
        ```
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"
        
  /mb/tcp/poll/{name}/toggle:
    post:
      summary: Polling requests - Enable/Disable poll request (mbtcp.poll.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: enabled
          required: true
          in: body
          description: Polling enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

  /mb/tcp/poll/{name}/history:
    get:
      summary: Polling requests - Read history (mbtcp.poll.history)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/poll/{name}/history
        ```
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          description: Request is ok
          schema:
            allOf:
              - $ref: "#/definitions/dataHistory"
            required:
              - status
            properties:
              status:
                type: string
                description: Response string
          examples:
            'application/json':
              {
                "status":"ok",
                "history":[
                    {ts: "1.4706441598119247e+18", data: "[0,0,1,1,0,1,0]"},
                    {ts: "1.4706441598119247e+18", data: "[0,0,1,1,0,1,0]"}
                ]
              }

  /mb/tcp/polls:
    get:
      summary: Polling requests - Read all poll requests status (mbtcp.polls.read)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/polls
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/mbtcpPollsStatus"

    delete:
      summary: Polling requests - Delete all poll requests (mbtcp.polls.delete)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/polls
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

  /mb/tcp/polls/toggle:
    post:
      summary: Polling requests - Enable/Disable all poll requests (mbtcp.polls.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - name: enabled
          required: true
          in: body
          description: Polling enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

  /mb/tcp/polls/config:
    get:
      summary: Polling requests - Export poll requests (mbtcp.polls.export)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/polls/config
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/mbtcpPollsStatus"

    post:
      summary: Polling requests - Import poll requests (mbtcp.polls.import)
      description: |

        ##### Request example

          ```json
        {
          "polls": [
            {
                "name": "led_1",
                "fc": 1,
                "ip": "192.168.3.2",
                "port": "502",
                "slave": 22,
                "addr": 250,
                "len": 10,
                "interval" : 3,
                "enabled": true
            },
            {
                "name": "led_2",
                "fc": 1,
                "ip": "192.168.3.2",
                "port": "502",
                "slave": 22,
                "addr": 250,
                "len": 10,
                "interval" : 3,
                "enabled": true
            }]
          }
          ```
      parameters:
        - name: mbtcpPollsStatus
          in: body
          required: true
          description: Import poll requests
          schema:
            $ref: "#/definitions/mbtcpPollsStatus"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

#
# @Filter requests
#
  /mb/tcp/filter/{name}:
    get:
      summary: Filter requests - Read filter request status (mbtcp.filter.read)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/filter/{name}
        ```
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          description: Request is ok
          schema:
            allOf:
              - $ref: "#/definitions/mbtcpFilterStatus"
            required:
              - status
            properties:
              status:
                type: string
                description: Response string
          examples:
            'application/json':
              {
                "status":"ok",
                "enabled": true,
                "type": 6,
                "arg": [1.0, 2.0]                
              }
    post:
      summary: Filter requests - Add filter request (mbtcp.filter.create)
      description: |

        ##### Request example

        - type 0:

          ```json
          {
            "enabled": true,
            "type": 0
          }
          ```

        - type 1, 2, 3, 4, 5:

          ```json
          {
            "enabled": true,
            "type": 1,
            "arg": [1.0]
          }
          ```

        - type 6, 7, 8, 9:

          ```json
          {
            "enabled": true,
            "type": 6,
            "arg": [1.0, 2.0]
          }
          ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: mbtcpFilterStatus
          in: body
          required: true
          description: Filter status
          schema:
            $ref: "#/definitions/mbtcpFilterStatus"
      responses:
        default:
          $ref: "#/responses/fail"
        200:
          $ref: "#/responses/ok"

    put:
      summary: Filter requests - Update filter request (mbtcp.filter.update)
      description: |

        ##### Request example

        - type 0:

          ```json
          {
            "enabled": true,
            "type": 0
          }
          ```

        - type 1, 2, 3, 4, 5:

          ```json
          {
            "enabled": true,
            "type": 1,
            "arg": [1.0]
          }
          ```

        - type 6, 7, 8, 9:

          ```json
          {
            "enabled": true,
            "type": 6,
            "arg": [1.0, 2.0]
          }
          ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: mbtcpFilterStatus
          in: body
          required: true
          description: Filter status
          schema:
            $ref: "#/definitions/mbtcpFilterStatus"
      responses:
        default:
          $ref: "#/responses/fail"
        200:
          $ref: "#/responses/ok"

    delete:
      summary: Filter requests - Delete filter request (mbtcp.filter.delete)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/filter/{name}
        ```
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/fail"
        200:
          $ref: "#/responses/ok"

  /mb/tcp/filter/{name}/toggle:
    post:
      summary: Filter requests - Enable/Disable filter request (mbtcp.filter.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: enabled
          required: true
          in: body
          description: Polling enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

  /mb/tcp/filters:
    get:
      summary: Filter requests - Read all filter requests (mbtcp.filters.read)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/filters
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/mbtcpFiltersStatus"
    delete:
      summary: Filter requests - Delete all filter requests (mbtcp.filters.delete)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/filters
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"
  
  /mb/tcp/filters/toggle:
    post:
      summary: Filter requests - Enable/Disable all filter requests (mbtcp.filters.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - name: enabled
          required: true
          in: body
          description: Filter enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"
  
  /mb/tcp/filters/config:
    get:
      summary: Filter requests - Export filter requests (mbtcp.filters.export)
      description: |

        ##### Request example
        
        ```bash
        /mb/tcp/filters/config
        ```
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/mbtcpFiltersStatus"

    post:
      summary: Filter requests - Import filter requests (mbtcp.filters.import)
      description: |

        ##### Request example

        ```json
        {
          "filters": [
            {
                "name": "led_1",
                "enabled": true,
                "type": 6,
                "arg": [1.0, 2.0]
            },
            {
                "name": "led_2",
                "enabled": true,
                "type": 6,
                "arg": [1.0, 2.0]
            }
          ]
        }
        ```
      parameters:
        - name: mbtcpFiltersStatus
          in: body
          required: true
          description: Import filter requests
          schema:
            $ref: "#/definitions/mbtcpFiltersStatus"
      responses:
        default:
          $ref: "#/responses/fail"
        '200':
          $ref: "#/responses/ok"

#
# ----- definitions
#
definitions:

  mbtcp:
    description: modbus tcp slave information
    required:
      - ip
      - slave
      - addr
    properties:
      ip:
        description: Slave IP address
        type: string
      port:
        description: Slave port
        type: string
        default: "502"
      slave:
        description: Device ID
        type: integer
        minimum: 0
        maximum: 247
        default: 1
      addr:
        description: Start address of registers
        type: integer
      len:
        description: Length of registers (FC15, 16 only)
        type: integer
        default: 1

  mbtcpRead:
    description: modbus tcp read response structure
    allOf:
      - $ref: "#/definitions/dataType"
      - $ref: "#/definitions/status"
    required:
      - status
    properties:
      data:
        description: Register or bit 'data array' or 'hexadecimal string'
      bytes:
        type: array
        description: Bytes array
        items:
          type: integer
          format: uint8

  mbtcpWrite:
    description: modbus tcp write request structure
    allOf:
      - $ref: "#/definitions/mbtcp"
    properties:
      hex:
        description: Hex/Dec string flag (FC6, 16 only)
        type: boolean
        default: false


  mbtcpPollStatus:
    description: modbus tcp polling request information without name field
    allOf:
      - $ref: "#/definitions/mbtcp"
      - $ref: "#/definitions/pollInterval"
      - $ref: "#/definitions/enabled"
      - $ref: "#/definitions/dataType"
      - $ref: "#/definitions/endian"
    required:
      - enabled
    properties:
      range:
        description: Scale range (fc 3, 4 and type 3 only)
        type: object
        properties:
          a:
            description: Scale domain low (fc 3, 4 and type 3 only)
            type: number
            format: float
          b:
            description: Scale domain high (fc 3, 4 and type 3 only)
            type: number
            format: float
          c:
            description: Scale range low (fc 3, 4 and type 3 only)
            type: number
            format: float
          d:
            description: Scale range high (fc 3, 4 and type 3 only)
            type: number
            format: float  

  mbtcpPollsStatus:
    description: modbus tcp polling requests array with name field
    required:
      - polls
    properties:
      polls:
        type: array
        description: an array of poll requests with names
        items: # extend poll name
          allOf:
            - $ref: "#/definitions/mbtcpPollStatus"
          required:
            - name
          properties:
            name:
              description: Polling request name
              type: string

  mbtcpFilterStatus:
    description: modbus tcp filter request information without name field
    allOf:
      - $ref: "#/definitions/enabled"
      - $ref: "#/definitions/equalityType"
    required:
      - enabled
      - type
    properties:
      arg:
        description: one item for type 1, 2, 3, 4, 5; two items for type 6, 7, 8, 9
        type: array
        items:
          type: number
          format: float

  mbtcpFiltersStatus:
    description: modbus tcp filter requests array with name field
    required:
      - filters
    properties:
      filters:
        type: array
        description: an array of filter requests with names
        items: # extend poll name
          allOf:
            - $ref: "#/definitions/mbtcpFilterStatus"
          required:
            - name
          properties:
            name:
              description: Polling request name
              type: string

  timeout:
    description: modbus tcp connection timeout in usec
    required:
      - timeout
    properties:
      timeout:
        type: integer
        format: int64
        description: Timeout in usec, range [200000,~)
        minimum: 200000
        default: 200000

  enabled:
    description: Enable flag
    required:
      - enabled
    properties:
      enabled:
        description: Enable flag
        type: boolean
        default: false

  status:
    description: status field in response string
    required:
      - status
    properties:
      status:
        description: Response string
        type: string
        default: "ok"

  dataHistory:
    description: history array
    required:
      - history
    properties:
      history:
        type: array
        description: history item
        items:
          required:
            - ts
            - data
          properties:
            ts:
              description: time string
              type: string
              format: dateTime
            data:
              description: data string
              type: string

  pollInterval:
    description: polling interval in second
    required:
      - interval
    properties:
      interval:
        description: polling interval in second
        type: integer
        minimum: 3
        default: 3

  dataType:
    description: Data type (FC 3, 4 only)
    required:
      - type
    properties:
      type:
        description: Data type (fc 3, 4 only)
        type: integer
        enum:
        - 0 #
        - 1 # RegisterArray
        - 2 # HexString
        - 3 # Scale
        - 4 # UInt16
        - 5 # Int16
        - 6 # UInt32
        - 7 # Int32
        - 8 # Float32
        minimum: 0
        maximum: 8
        default: 1

  equalityType:
    description: Equality type
    required:
      - type
    properties:
      type:
        description: Equality type
        type: integer
        enum:
        - 0 # Change
        - 1 # GreaterEqual
        - 2 # Greater
        - 3 # Equal
        - 4 # Less
        - 5 # LessEqual
        - 6 # InsideRange
        - 7 # InsideIncRange
        - 8 # OutsideRange
        - 9 # OutsideIncRange

  endian:
    description: Endian (fc 3, 4 and type 4~8 only)
    required:
      - order
    properties:
      order:
        description: Endian (fc 3, 4 and type 4~8 only)
        type: integer
        enum:
        - 0 # 
        - 1 # BigEndian
        - 2 # LittleEndian
        - 3 # MidBigEndian
        - 4 # MidLittleEndian
        minimum: 1
        maximum: 4
        default: 1

#
# ----- parameters
#
parameters:

  # path
  readFunctionCode:
    name: fc
    in: path
    required: true
    description: Modbus function code
    type: integer
    enum:
    - 1 # read coils
    - 2 # read discrete inputs
    - 3 # read holding registers
    - 4 # read input registers

  writeFunctionCode:
    name: fc
    in: path
    required: true
    description: Modbus function code
    type: integer
    enum:
    - 5  # write single coil
    - 6  # write single register
    - 15 # write multi coils
    - 16 # write multi registers

  pollName:
    name: name
    in: path
    required: true
    description: Polling request name
    type: string

  # query
  ip:
    name: ip
    in: query
    description: Slave IP address
    type: string
    required: true
    allowEmptyValue: false

  port:
    name: port
    in: query
    description: Slave port
    type: string
    default: "502"
    required: true
    allowEmptyValue: false

  slave:
    name: slave
    in: query
    description: Device ID
    type: integer
    format: uint8
    required: true
    minimum: 0
    maximum: 247
    default: 1
    allowEmptyValue: false

  startAddr:
    name: addr
    in: query
    description: Start address of registers
    type: integer
    required: true
    allowEmptyValue: false
    minimum: 0
    maximum: 9998
    default: 0

  length:
    name: len
    in: query
    description: Length of registers
    type: integer
    default: 1

  dataType:
    name: type
    in: query
    description: Data type (fc 3, 4 only)
    type: integer
    format: uint8
    minimum: 0
    maximum: 8
    default: 1

  endian:
    name: order
    in: query
    description: Endian (fc 3, 4 and type 4~8 only)
    type: integer
    format: uint8
    minimum: 0
    maximum: 4
    default: 1

  scaleDomainLow:
    name: a
    in: query
    description: Scale domain low (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleDomainHigh:
    name: b
    in: query
    description: Scale domain high (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleRangeLow:
    name: c
    in: query
    description: Scale range low (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleRangeHigh:
    name: d
    in: query
    description: Scale range high (fc 3, 4 and type 3 only)
    type: number
    format: float

#
# ----- responses
#
responses:

  mbtcpFiltersStatus:
    description: Request is ok
    schema:
      allOf:
        - $ref: "#/definitions/mbtcpFiltersStatus"
      required: # extend status field
        - status
      properties:
        status:
          type: string
          description: Response string
    examples:
      'application/json':
        {
          "status": "ok",
          "filters": [
              {
                  "name": "led_1",
                  "enabled": true,
                  "type": 6,
                  "arg": [1.0, 2.0]
              },
              {
                  "name": "led_2",
                  "enabled": true,
                  "type": 6,
                  "arg": [1.0, 2.0]
              }]
        }

  mbtcpPollsStatus:
    description: Request is ok
    schema:
      allOf:
        - $ref: "#/definitions/mbtcpPollsStatus"
      required: # extend status field
        - status
      properties:
        status:
          type: string
          description: Response string
    examples:
      'application/json':
        {
        "polls": [
          {
              "name": "led_1",
              "fc": 1,
              "ip": "192.168.3.2",
              "port": "502",
              "slave": 22,
              "addr": 250,
              "len": 10,
              "interval" : 3,
              "enabled": true
          },
          {
              "name": "led_2",
              "fc": 1,
              "ip": "192.168.3.2",
              "port": "502",
              "slave": 22,
              "addr": 250,
              "len": 10,
              "interval" : 3,
              "enabled": true
          }]
        }

  ok:
    description: Simple response for success request
    schema:
      $ref: "#/definitions/status"
    examples:
      'application/json':
        {
        "status": "ok"
        }

  fail:
    description: Simple response for bad request
    schema:
      $ref: "#/definitions/status"
    examples:
      'application/json':
        {
         "status": "Fail to complete request!"
        }
