swagger: "2.0"

info:
  version: 0.0.1
  title: mb-web
  description: |
  
    ### Restful API for [psmb](https://github.com/taka-wang/psmb)

schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
host: localhost
basePath: /api

#
# ----- paths
#
paths:
  /mb/tcp/{fc}:
    get:
      summary: One-off requests - Read coil/register (mbtcp.once.read)
      description: |

        ##### Request examples
        
        - Bits read (FC1, FC2): 
          
          ```BASH
          /api/mb/tcp/1?ip=192.168.3.2&port=503&slave=1&addr=10&len=4
          ```
          
          
        - Register read (FC3, FC4) - type 1, 2 (Register Array): 
          
          ```BASH
          /api/mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=10&type=1
          ```
          
          
        - Register read (FC3, FC4) - type 3 (scale):
                  
          ```BASH
          /api/mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=3&a=0&b=65535&c=100&d=500
          ```
        
        
        - Register read (FC3, FC4) - type 4, 5 (16-bit):
                  
          ```BASH
          /api/mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=4&order=1
          ```
        
        
        - Register read (FC3, FC4) - type 6, 7, 8 (32-bit):
          
          ```BASH
          /api/mb/tcp/3?ip=192.168.3.2&port=503&slave=1&addr=10&len=4&type=6&order=3
          ```
      parameters:
        - $ref: "#/parameters/readFunctionCode"
        - $ref: "#/parameters/ip"
        - $ref: "#/parameters/port"
        - $ref: "#/parameters/slave"
        - $ref: "#/parameters/startAddr"
        - $ref: "#/parameters/length"
        - $ref: "#/parameters/dataType"
        - $ref: "#/parameters/endian"
        - $ref: "#/parameters/scaleDomainLow"
        - $ref: "#/parameters/scaleDomainHigh"
        - $ref: "#/parameters/scaleRangeLow"
        - $ref: "#/parameters/scaleRangeHigh"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          description: Request is ok
          schema:
            $ref: "#/definitions/mbtcpRead"
          examples:
            Bits read (FC1, FC2):
              {
                "status": "ok",
                "data": [0, 1, 0, 1, 0, 1]
              }
            Register read (FC3, FC4) - type 1 (Register Array):
              {
                "status": "ok",
                "type": 1,
                "bytes": [0XFF, 0X34, 0XAB],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 2 (Hex String):
              {
                "status": "ok",
                "type": 2,
                "bytes": [0XFF, 0X34, 0XAB],
                "data": "112C004F12345678"
              }
            Register read (FC3, FC4) - type 3 (scale):
              {
                "status": "ok",
                "type": 3,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [22.34, 33.12, 44.56]
              }
            Register read (FC3, FC4) - type 4, 5 (16-bit):
              {
                "status": "ok",
                "type": 4,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 6, 7 (UInt32, Int32):
              {
                "status": "ok",
                "type": 6,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [255, 1234, 789]
              }
            Register read (FC3, FC4) - type 8 (Float32):
              {
                "status": "ok",
                "type": 8,
                "bytes": [0XAB, 0X12, 0XCD, 0XED, 0X12, 0X34],
                "data": [22.34, 33.12, 44.56]
              }

    post:
      summary: One-off requests - Write coil/register (mbtcp.once.write)
      description: |

        ##### Request examples
        
        - bit write (FC5) - write single bit:
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "data": 1
            }
          ```
        
        - register write (FC6) - write single register (dec):
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "hex": false,
              "data": "22"
            }
          ```
        
        - register write (FC6) - write single register (hex)
          
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "hex": true,
              "data": "ABCD"
            }
          ```
        
        - bits write (FC15) - write multiple bits
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "data": [1,0,1,0]
            }
          ```

        - registers write (FC16) - write multiple registers (dec)
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "hex": false,
              "data": "11,22,33,44"
            }
          ```

        - registers write (FC16) - write multiple registers (hex)
        
          ```JSON
            {
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4,
              "hex": true,
              "data": "ABCD1234EFAB1234"
            }
          ```
      parameters:
        - $ref: "#/parameters/writeFunctionCode"
        - name: body
          in: body
          required: true
          description: Data to be written.
          schema:
            $ref: "#/definitions/mbtcpWrite"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        200:
          $ref: "#/responses/simpleOK"

  /mb/tcp/timeout:
    get:
      summary: One-off requests - Get TCP connection timeout (mbtcp.timeout.read)
      description: |
        Get modbus TCP connection timeout
        
        ```bash
        /api/mb/tcp/timeout
        ```
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          description: Request is ok
          schema:
            required:
              - status
              - timeout
            properties:
              status:
                type: string
                description: Response string
              timeout:
                type: integer
                format: int64
                description: Timeout in usec, range [200000,~)
                minimum: 200000
                default: 200000
          examples:
            'application/json': 
              {
                "status": "ok", 
                "timeout": 210000
              }
    
    post:
      summary: One-off requests - Set TCP connection timeout (mbtcp.timeout.update)
      description: |
        ##### Request examples
        
        ```JSON
        { "timeout": 210000 }
        ```
      parameters:
        - name: timeout
          required: true
          in: body
          description: Timeout in usec, range [200000,~)
          schema:
            required:
              - timeout
            properties:
              timeout:
                type: integer
                format: int64
                minimum: 200000
                default: 200000
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"

  /mb/tcp/poll/{name}:
    get:
      summary: Polling requests - Read poll request status (mbtcp.poll.read)
      description: Get polling request status
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          description: Request is ok
          schema:
            allOf:
              - $ref: "#/definitions/mbtcpPollStatus"
            required:
              - status
            properties:
              status:
                type: string
                description: Response string
          examples:
            'application/json':
              {
                "fc": 1,
                "ip": "192.168.3.2",
                "port": "502",
                "slave": 22,
                "addr": 250,
                "len": 10,
                "interval" : 3,
                "status": "ok",
                "enabled": true,
                "type": 1,
                "order": 2,
                "range": {}
              }
    
    post:
      summary: Polling requests - Add poll request (mbtcp.poll.create)
      description: |

        ##### Request examples
        
        - Bits read (FC1, FC2):
          
          ```JSON
            {
              "interval": 3,
              "enabled": true,
              "fc" : 1,
              "ip": "192.168.0.1",
              "port": "503",
              "slave": 1,
              "addr": 10,
              "len": 4
            }
          ```
        
        - Register read (FC3, FC4) - type 1, 2 (raw):
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 1
          }
          ```
        
        - Register read (FC3, FC4) - type 3 (scale)
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 3,
            "range": 
            {
                "a": 0,
                "b": 65535,
                "c": 100,
                "d": 500
            }
          }
          ```

        - Register read (FC3, FC4) - type 4, 5 (16-bit)
          
          ```JSON
          {
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 4,
            "order": 1
          }
          ```

        - Register read (FC3, FC4) - type 6, 7, 8 (32-bit)
          
          ```JSON
          {
            "name": "led_1",
            "interval": 3,
            "enabled": true,
            "fc" : 3,
            "ip": "192.168.0.1",
            "port": "503",
            "slave": 1,
            "addr": 10,
            "len": 4,
            "type": 6,
            "order": 3
          }
          ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: body
          in: body
          required: true
          description: Data to be polled.
          schema:
            $ref: "#/definitions/mbtcpPollStatus"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"

    put:
      summary: Polling requests - Update poll request interval (mbtcp.poll.update)
      description: |

        ##### Request examples
        
        ```JavaScript
        {
            "interval" : 3
        }
        ```

      parameters:
        - $ref: "#/parameters/pollName"
        - name: interval
          required: true
          in: body
          description: Polling interval in sec
          schema:
            required:
              - timeout
            properties:
              timeout:
                type: integer
                minimum: 3
                default: 3
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"
          
    delete:      
      summary: Polling requests - Delete poll request (mbtcp.poll.delete)
      #description: Delete poll request
      parameters:
        - $ref: "#/parameters/pollName"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"
        
  /mb/tcp/poll/{name}/toggle:
    post:
      summary: Polling requests - Enable/Disable poll request (mbtcp.poll.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - $ref: "#/parameters/pollName"
        - name: enabled
          required: true
          in: body
          description: Polling enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"

  /mb/tcp/polls:
    get:
      summary: Polling requests - Read all poll requests status (mbtcp.polls.read)
      description: Read all poll requests status
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/mbtcpPollsStatus"

    delete:
      summary: Polling requests - Delete all poll requests (mbtcp.polls.delete)
      #description: Delete all poll requests
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"

  /mb/tcp/polls/toggle:
    post:
      summary: Polling requests - Enable/Disable all poll requests (mbtcp.polls.toggle)
      description:  |

        ##### Request examples
        
        ```JavaScript
        {
            "enabled" : true
        }
        ```
      parameters:
        - name: enabled
          required: true
          in: body
          description: Polling enabled flag	
          schema:
            $ref: "#/definitions/enabled"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"

  /mb/tcp/polls/config:
    get:
      summary: Polling requests - Export poll requests (mbtcp.polls.export)
      #description: Export poll requests
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/mbtcpPollsStatus"

    post:
      summary: Polling requests - Import poll requests (mbtcp.polls.import)
      #description: Import poll requests
      parameters:
        - name: body
          in: body
          required: true
          description: Import poll requests
          schema:
            $ref: "#/definitions/mbtcpPollsStatus"
      responses:
        default:
          $ref: "#/responses/simpleFail"
        '200':
          $ref: "#/responses/simpleOK"


#
# ----- definitions
#
definitions:

  mbtcp:
    required:
      - ip
      - slave
      - addr
    properties:
      ip:
        description: Slave IP address
        type: string
      port:
        description: Slave port
        type: string
        default: "502"
      slave:
        description: Device ID
        type: integer
        minimum: 0
        maximum: 247
        default: 1
      addr:
        description: Start address of registers
        type: integer
      len:
        description: Length of registers (FC15, 16 only)
        type: integer
        default: 1

  mbtcpRead:
    required:
      - status
    properties:
      data:
        description: Register or bit 'data array' or 'hexadecimal string'
      bytes:
        type: array
        description: Bytes array
        items:
          type: integer
          format: uint8
      type:
        type: integer
        format: uint8
        description: Data type
      status:
          type: string
          description: Response string

  mbtcpWrite:
    allOf:
      - $ref: "#/definitions/mbtcp"
    properties:
      hex:
        description: Hex/Dec string flag (FC6, 16 only)
        type: boolean
        default: false

  mbtcpPollStatus:
    allOf:
      - $ref: "#/definitions/mbtcp"
    required:
      - interval
      - enabled
    properties:
      interval:
        description: polling interval in sec
        type: integer
        minimum: 1
        default: 1
      enabled:
        description: polling enabled flag
        type: boolean
        default: false
      type:
        description: Data type (fc 3, 4 only)
        type: integer
        format: uint8
        minimum: 0
        maximum: 8
        default: 1
      order:
        description: Endian (fc 3, 4 and type 4~8 only)
        type: integer
        format: uint8
        minimum: 0
        maximum: 4
        default: 1
      range:
        description: Scale range (fc 3, 4 and type 3 only)
        type: object
        properties:
          a:
            description: Scale domain low (fc 3, 4 and type 3 only)
            type: number
            format: float
          b:
            description: Scale domain high (fc 3, 4 and type 3 only)
            type: number
            format: float
          c:
            description: Scale range low (fc 3, 4 and type 3 only)
            type: number
            format: float
          d:
            description: Scale range high (fc 3, 4 and type 3 only)
            type: number
            format: float  


  mbtcpPollsStatus:
    required:
      - polls
    properties:
      polls:
        type: array
        description: an array of poll requests
        items:
          allOf:
            - $ref: "#/definitions/mbtcpPollStatus"
          required:
            - name
          properties:
            name:
              description: Polling request name
              type: string

  enabled:
    required:
      - enabled
    properties:
      enabled:
        description: Enabled flag
        type: boolean
        default: false

  status:
    required:
      - status
    properties:
      status:
        type: string
        description: Response string

#
# ----- parameters
#
parameters:

  # path
  readFunctionCode:
    name: fc
    in: path
    required: true
    description: Modbus function code
    type: integer
    enum: [1, 2, 3, 4]

  writeFunctionCode:
    name: fc
    in: path
    required: true
    description: Modbus function code
    type: integer
    enum: [5, 6, 15, 16]

  pollName:
    name: name
    in: path
    required: true
    description: Polling request name
    type: string

  # query
  ip:
    name: ip
    in: query
    description: Slave IP address
    type: string
    required: true
    allowEmptyValue: false

  port:
    name: port
    in: query
    description: Slave port
    type: string
    default: "502"
    required: true
    allowEmptyValue: false

  slave:
    name: slave
    in: query
    description: Device ID
    type: integer
    format: uint8
    required: true
    minimum: 0
    maximum: 247
    default: 1
    allowEmptyValue: false

  startAddr:
    name: addr
    in: query
    description: Start address of registers
    type: integer
    required: true
    allowEmptyValue: false

  length:
    name: len
    in: query
    description: Length of registers
    type: integer
    default: 1

  dataType:
    name: type
    in: query
    description: Data type (fc 3, 4 only)
    type: integer
    format: uint8
    minimum: 0
    maximum: 8
    default: 1

  endian:
    name: order
    in: query
    description: Endian (fc 3, 4 and type 4~8 only)
    type: integer
    format: uint8
    minimum: 0
    maximum: 4
    default: 1

  scaleDomainLow:
    name: a
    in: query
    description: Scale domain low (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleDomainHigh:
    name: b
    in: query
    description: Scale domain high (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleRangeLow:
    name: c
    in: query
    description: Scale range low (fc 3, 4 and type 3 only)
    type: number
    format: float

  scaleRangeHigh:
    name: d
    in: query
    description: Scale range high (fc 3, 4 and type 3 only)
    type: number
    format: float

#
# ----- responses
#
responses:

  mbtcpPollsStatus:
    description: Request is ok
    schema:
      allOf:
        - $ref: "#/definitions/mbtcpPollsStatus"
      required:
        - status
      properties:
        status:
          type: string
          description: Response string
    examples:
      'application/json':
        {
        "polls": [
          {
              "name": "led_1",
              "fc": 1,
              "ip": "192.168.3.2",
              "port": "502",
              "slave": 22,
              "addr": 250,
              "len": 10,
              "interval" : 3,
              "enabled": true
          },
          {
              "name": "led_2",
              "fc": 1,
              "ip": "192.168.3.2",
              "port": "502",
              "slave": 22,
              "addr": 250,
              "len": 10,
              "interval" : 3,
              "enabled": true
          }]
        }

  simpleOK:
    description: Request is ok
    schema:
      $ref: "#/definitions/status"
    examples:
      'application/json':
        {
        "status": "ok"
        }

  simpleFail:
    description: Bad request
    schema:
      $ref: "#/definitions/status"
    examples:
      'application/json':
        {
         "status": "Fail to complete request!"
        }
